`timescale 1ns / 1ps

module regs_uart_tb;

    reg clk;
    reg rst;
    reg wr_i;
    reg rd_i;
    reg [2:0] addr_i;
    reg [7:0] din_i;
    reg tx_fifo_full;
    reg rx_fifo_empty;
    reg [7:0] rx_fifo_data;
    reg rx_oe;
    reg rx_pe;
    reg rx_fe;
    reg rx_bi;
    reg rx_push;
    wire [7:0] dout_o;
    wire tx_push_o;
    wire rx_pop_o;
    wire baud_out;
    wire [7:0] ier;
    wire [7:0] iir;
    wire [7:0] lcr;
    wire [7:0] lsr;
    wire [7:0] mcr;
    wire [7:0] msr;
    wire [7:0] fcr;
    wire [7:0] scr;

    // Instantiate the UART Registers module
    regs_uart uut (
        .clk(clk),
        .rst(rst),
        .wr_i(wr_i),
        .rd_i(rd_i),
        .addr_i(addr_i),
        .din_i(din_i),
        .dout_o(dout_o),
        .tx_push_o(tx_push_o),
        .tx_fifo_full(tx_fifo_full),
        .rx_pop_o(rx_pop_o),
        .rx_fifo_empty(rx_fifo_empty),
        .rx_fifo_data(rx_fifo_data),
        .rx_oe(rx_oe),
        .rx_pe(rx_pe),
        .rx_fe(rx_fe),
        .rx_bi(rx_bi),
        .rx_push(rx_push),
        .baud_out(baud_out),
        .ier(ier),
        .iir(iir),
        .lcr(lcr),
        .lsr(lsr),
        .mcr(mcr),
        .msr(msr),
        .fcr(fcr),
        .scr(scr)
    );

    // Clock generation (50MHz clock)
    initial clk = 0;
    always #10 clk = ~clk;

    initial begin
        // Initialize inputs
        rst = 1;
        wr_i = 0;
        rd_i = 0;
        addr_i = 3'd0;
        din_i = 8'd0;
        tx_fifo_full = 0;
        rx_fifo_empty = 1;
        rx_fifo_data = 8'd0;
        rx_oe = 0;
        rx_pe = 0;
        rx_fe = 0;
        rx_bi = 0;
        rx_push = 0;

        // Wait for reset
        #100 rst = 0;

        // Test Case 1: Write and Read LCR Register
        $display("Test Case 1: Write and Read LCR Register");
        write_register(3'h3, 8'h83); // Set DLAB and 8 data bits
        read_register(3'h3);
        if (dout_o == 8'h83) begin
            $display("LCR register read correctly: %h", dout_o);
        end else begin
            $display("Error reading LCR register: %h", dout_o);
        end

        // Test Case 2: Write Divisor Latch Registers
        $display("Test Case 2: Write Divisor Latch Registers");
        write_register(3'h0, 8'h01); // DLL
        write_register(3'h1, 8'h00); // DLM
        // Clear DLAB
        write_register(3'h3, 8'h03);
        // Check baud_out signal over time (not practical in testbench without additional logic)

        // Test Case 3: Write and Read IER Register
        $display("Test Case 3: Write and Read IER Register");
        write_register(3'h1, 8'h0F); // Enable all interrupts
        read_register(3'h1);
        if (dout_o == 8'h0F) begin
            $display("IER register read correctly: %h", dout_o);
        end else begin
            $display("Error reading IER register: %h", dout_o);
        end

        // Test Case 4: Interrupt Handling
        $display("Test Case 4: Interrupt Handling");
        // Simulate data ready condition
        rx_fifo_empty = 0;
        rx_push = 1;
        #20;
        if (iir[0] == 0) begin
            $display("Interrupt pending as expected");
        end else begin
            $display("Error: Interrupt not pending");
        end
        rx_fifo_empty = 1;
        rx_push = 0;

        // Test Case 5: Write and Read FCR Register
        $display("Test Case 5: Write and Read FCR Register");
        write_register(3'h2, 8'hC7); // Enable FIFO, reset RX/TX FIFO, set trigger level
        read_register(3'h2);
        if (fcr == 8'hC7) begin
            $display("FCR register read correctly: %h", fcr);
        end else begin
            $display("Error reading FCR register: %h", fcr);
        end

        // Test Case 6: Error Flags in LSR
        $display("Test Case 6: Error Flags in LSR");
        rx_oe = 1;
        rx_pe = 1;
        rx_fe = 1;
        rx_bi = 1;
        #20;
        read_register(3'h5);
        if (lsr[4:1] == 4'b1111) begin
            $display("LSR error flags set correctly: %b", lsr[4:1]);
        end else begin
            $display("Error in LSR error flags: %b", lsr[4:1]);
        end
        rx_oe = 0;
        rx_pe = 0;
        rx_fe = 0;
        rx_bi = 0;

        // Finish simulation
        #1000;
        $finish;
    end

    // Task to write to a register
    task write_register(input [2:0] address, input [7:0] data);
        begin
            wr_i = 1;
            addr_i = address;
            din_i = data;
            #20;
            wr_i = 0;
            #20;
        end
    endtask

    // Task to read from a register
    task read_register(input [2:0] address);
        begin
            rd_i = 1;
            addr_i = address;
            #20;
            rd_i = 0;
            #20;
        end
    endtask

endmodule
