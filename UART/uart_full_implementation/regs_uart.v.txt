module regs_uart(
    input wire clk, rst,
    input wire wr_i, rd_i,
    input wire [2:0] addr_i,
    input wire [7:0] din_i,
    output reg [7:0] dout_o,

    // Transmit FIFO Interface
    output wire tx_push_o,          // Add new data to TX FIFO
    input wire tx_fifo_full,        // TX FIFO full flag

    // Receive FIFO Interface
    output wire rx_pop_o,           // Read data from RX FIFO
    input wire rx_fifo_empty,       // RX FIFO empty flag
    input wire [7:0] rx_fifo_data,  // Data from RX FIFO
    input wire rx_oe, rx_pe, rx_fe, rx_bi, // Error flags from RX
    input wire rx_push,             // New data pushed to RX FIFO

    // Baud Rate Generator
    output wire baud_out,           // Baud rate clock output

    // Control and Status Registers
    output reg [7:0] ier,           // Interrupt Enable Register
    output reg [7:0] iir,           // Interrupt Identification Register
    output reg [7:0] lcr,           // Line Control Register
    output reg [7:0] lsr,           // Line Status Register
    output reg [7:0] mcr,           // Modem Control Register (for RTS/CTS)
    output reg [7:0] msr,           // Modem Status Register (for RTS/CTS)
    output reg [7:0] fcr,           // FIFO Control Register
    output reg [7:0] scr            // Scratchpad Register
);

    // Internal registers
    reg [7:0] thr;                  // Transmit Holding Register
    reg [7:0] rbr;                  // Receiver Buffer Register
    reg [15:0] dll_dlm;             // Divisor Latch Registers
    reg dlab;                       // Divisor Latch Access Bit

    // Synchronization and Control
    reg [7:0] int_pending;          // Interrupt pending flags

    // Assign DLAB from LCR
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            dlab <= 1'b0;
        end else begin
            dlab <= lcr[7];
        end
    end

    // Write operation
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            thr <= 8'd0;
            dll_dlm <= 16'd0;
            ier <= 8'd0;
            lcr <= 8'd0;
            mcr <= 8'd0;
            fcr <= 8'd0;
            scr <= 8'd0;
        end else if (wr_i) begin
            if (!dlab) begin
                case (addr_i)
                    3'h0: begin
                        thr <= din_i;           // Write to THR
                        // Signal to push data to TX FIFO
                    end
                    3'h1: ier <= din_i;         // Interrupt Enable Register
                    3'h2: fcr <= din_i;         // FIFO Control Register
                    3'h3: lcr <= din_i;         // Line Control Register
                    3'h4: mcr <= din_i;         // Modem Control Register
                    3'h7: scr <= din_i;         // Scratchpad Register
                    default: ;
                endcase
            end else begin
                case (addr_i)
                    3'h0: dll_dlm[7:0] <= din_i;    // Divisor Latch LSB
                    3'h1: dll_dlm[15:8] <= din_i;   // Divisor Latch MSB
                    default: ;
                endcase
            end
        end
    end

    // Read operation
    always @(posedge clk) begin
        if (rd_i) begin
            if (!dlab) begin
                case (addr_i)
                    3'h0: dout_o <= rx_fifo_data;   // Read from RBR
                    3'h1: dout_o <= ier;            // Interrupt Enable Register
                    3'h2: dout_o <= iir;            // Interrupt Identification Register
                    3'h3: dout_o <= lcr;            // Line Control Register
                    3'h4: dout_o <= mcr;            // Modem Control Register
                    3'h5: dout_o <= lsr;            // Line Status Register
                    3'h6: dout_o <= msr;            // Modem Status Register
                    3'h7: dout_o <= scr;            // Scratchpad Register
                    default: dout_o <= 8'd0;
                endcase
            end else begin
                case (addr_i)
                    3'h0: dout_o <= dll_dlm[7:0];   // Divisor Latch LSB
                    3'h1: dout_o <= dll_dlm[15:8];  // Divisor Latch MSB
                    default: dout_o <= 8'd0;
                endcase
            end
        end
    end

    // Interrupt handling
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            int_pending <= 8'd0;
            iir <= 8'd1; // No interrupt pending
        end else begin
            // Check for interrupts
            int_pending[0] <= ier[0] & !rx_fifo_empty;  // Received Data Available
            int_pending[1] <= ier[1] & rx_fe;           // Receiver Line Status
            int_pending[2] <= ier[2] & !tx_fifo_full;   // Transmitter Holding Register Empty
            // Update IIR
            if (|int_pending) begin
                iir[0] <= 1'b0; // Interrupt pending
                // Prioritize interrupts (example: RDA > THRE > RLS)
                if (int_pending[0]) begin
                    iir[3:1] <= 3'b100; // Received Data Available
                end else if (int_pending[1]) begin
                    iir[3:1] <= 3'b011; // Receiver Line Status
                end else if (int_pending[2]) begin
                    iir[3:1] <= 3'b010; // THR Empty
                end
            end else begin
                iir <= 8'd1; // No interrupt pending
            end
        end
    end

    // Line Status Register updates
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            lsr <= 8'd0;
        end else begin
            lsr[0] <= !rx_fifo_empty; // Data Ready
            lsr[1] <= rx_oe;          // Overrun Error
            lsr[2] <= rx_pe;          // Parity Error
            lsr[3] <= rx_fe;          // Framing Error
            lsr[4] <= rx_bi;          // Break Interrupt
            lsr[5] <= !tx_fifo_full;  // THR Empty
            lsr[6] <= !tx_fifo_full;  // Transmitter Empty (simplified)
            lsr[7] <= 1'b0;           // FIFO Data Error (not implemented)
        end
    end

    // Output signals to FIFOs
    assign tx_push_o = wr_i & (addr_i == 3'h0) & !dlab;
    assign rx_pop_o  = rd_i & (addr_i == 3'h0) & !dlab;

    // Baud Rate Generator (simplified)
    reg [15:0] baud_counter;
    always @(posedge clk or posedge rst) begin
        if (rst) begin
            baud_counter <= 16'd0;
        end else if (baud_counter == 16'd0) begin
            baud_counter <= dll_dlm;
        end else begin
            baud_counter <= baud_counter - 1;
        end
    end
    assign baud_out = (baud_counter == 16'd0);

endmodule
